import type { ContentType } from "@/types"
import { env } from "./env"
import { GoogleGenAI, Modality } from "@google/genai"
import { put } from '@vercel/blob';

const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY! })

export async function generatePoem(content:string): Promise<string> {
  try {
    const response = await genAI.models.generateContent({
      model: "gemini-2.0-flash",
      contents: content,
      config: {
        systemInstruction: "You are a creative poet. Create a beautiful, short poem (2-4 lines) that captures the essence of the following content. Focus on emotion, imagery, and artistic expression. Make the poem unique and meaningful",
      },
    })
    console.log(response?.text)
    return response?.text?.trim() || `Words flow like rivers,\nThoughts transform to art,\nBeauty in simplicity,\nTouching every heart.`

  } catch (error) {
    console.error("Error generating poem with Gemini:", error)
    return `Words flow like rivers,\nThoughts transform to art,\nBeauty in simplicity,\nTouching every heart.`
  }
}


export async function generateStory(content:string): Promise<string> {
  try {
    const response = await genAI.models.generateContent({
      model: "gemini-2.0-flash",
      contents: content,
      config: {
        systemInstruction: "You are a creative storyteller. Create brief, engaging stories (1-2 paragraphs) that transform the given content into a narrative. Focus on creativity, emotion, and artistic storytelling. Make each story captivating and meaningful.",
      },
    })
    console.log(response?.text)
    return response?.text?.trim() || `Words flow like rivers,\nThoughts transform to art,\nBeauty in simplicity,\nTouching every heart.`

  } catch (error) {
    console.error("Error generating story with Gemini:", error)
    return `In the digital realm, a message arrived with unexpected grace. What began as simple words transformed into something extraordinary, reminding us that even in our most routine communications, there lies the potential for wonder and connection.`
  }
}


export async function generateImage(content: string): Promise<string> {
  try {
    const prompt = `Create an artistic, abstract visualization of: ${content}. Style: modern digital art, colorful, expressive, beautiful composition`;


    // Generate the image using Gemini
    const response = await genAI.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation", 
      contents: prompt,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    console.log("Gemini response:", response);

    // Check if we have a valid response
    if (!response.candidates || response.candidates.length === 0) {
      throw new Error("No image generated by Gemini");
    }

    const parts = response.candidates[0]?.content?.parts;
    if (!parts) {
      throw new Error("No content parts found in Gemini response");
    }
  
    let imageData = null;
    
    for (const part of parts) {
      if (part.inlineData) {
        imageData = part.inlineData.data;
        break;
      }
    }

    if (!imageData) {
      throw new Error("No image data found in Gemini response");
    }

    // Generate a unique filename
    const timestamp = Date.now();
    const filename = `gemini-image-${timestamp}.png`;
    
    // Convert base64 data to buffer
    const buffer = Buffer.from(imageData, "base64");
    
    // Upload to Vercel Blob storage
    const { url } = await put(filename, buffer, {
      access: "public",
      token: env.BLOB_READ_WRITE_TOKEN,
      contentType: "image/png",
    });

    console.log(`Image successfully generated and uploaded: ${url}`);
    return url;
  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    // Return a placeholder image URL if generation fails
    return "/placeholder.svg?height=400&width=400&text=Art+Generation+Failed";
  }
}


// export async function generateImage(content: string): Promise<string> {
//   try {
//     const response = await fetch("https://fal.run/fal-ai/flux/schnell", {
//       method: "POST",
//       headers: {
//         Authorization: `Key ${env.FAL_API_KEY}`,
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({
//         prompt: `Create an artistic, abstract visualization of: ${content}. Style: modern digital art, colorful, expressive, beautiful composition`,
//         image_size: "square_hd",
//         num_inference_steps: 4,
//         num_images: 1,
//         enable_safety_checker: true,
//       }),
//     })

//     if (!response.ok) {
//       const errorText = await response.text()
//       throw new Error(`Fal AI API error: ${response.status} - ${errorText}`)
//     }

//     const result = await response.json()

//     if (!result.images || !result.images[0] || !result.images[0].url) {
//       throw new Error("No image URL returned from Fal AI")
//     }

//     return result.images[0].url
//   } catch (error) {
//     console.error("Error generating image:", error)
//     // Return a placeholder image URL if generation fails
//     return "/placeholder.svg?height=400&width=400&text=Art+Generation+Failed"
//   }
// }

export async function generateContent(content: string, type: ContentType): Promise<string> {
  switch (type) {
    case "poem":
      return generatePoem(content)
    case "story":
      return generateStory(content)
    case "image":
      return generateImage(content)
    default:
      throw new Error(`Unsupported content type: ${type}`)
  }
}
export async function testAIConnections() {
  try {
    // Try a simple test query to Gemini
    const response = await genAI.models.generateContent({
      model: "gemini-2.0-flash",
      contents: "Hello, test connection"
    })
    
    return { 
      success: true, 
      message: "AI connection successful" 
    }
  } catch (error) {
    console.error("AI connection test failed:", error)
    return { 
      success: false, 
      message: `AI connection failed: ${error}` 
    }
  }
}

